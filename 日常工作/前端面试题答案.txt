1.函数声明和函数表达式的区别？
函数声明 function a( ){ }
函数表达式 var a = function( ){ }
函数声明有提升，可以在任意位置调用，函数表达式没有提升，要先定义在调用。
2.闭包？
有权访问一个函数的局部变量的函数，就叫闭包。闭包是沟通函数外和函数内的桥梁，闭包可以获取函数内部的变量，可以将数据一直保存在内存，利用闭包可以实现set get方法，避免受其他作用域影响。
改变函数this指向？
.call(新this指向,参数，参数)；
.apply(新this指向，[参数，参数])；
.bind(text);
可以根据参数格式决定用哪种方式。
call和apply 会只执行，bind 不会

3.阻止事件冒泡？
event.stopPropagation();
event.cancelBubble = true;

4.取消默认事件？
event.preventDefault();
event.returnValue = false;

5.深拷贝浅拷贝？
浅拷贝是拷贝的指针地址
深拷贝是拷贝的值
JSON.parse(JSON.stringify( ));
递归遍历
如果是一层，可以用Object.assign({},object);
[...a]

6.数组去重？
indexof()去重，创建一个新数组[ ],对原数组进行遍历用indexof()判断在新数组中是否存在，-1为不存在，进行push到新数组中。
相邻元素去重，先调用sort()排序；然后比较相邻元素，不相等的push到新数组中
对象属性去重，遍历数组将对象的值设为对象的属性，对象无arr[i],则push到数组中，在obj上添加arr[i]赋初值1,如果有则将值++
.includes();
set与结构赋值去重   [...new Set（[1,2,3,2])；]

7.vue生命周期？
beforeCreate
created
beforeMount
mounted
beforeUpdate
updated
beforeDestroy
destroyed
Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载dom、渲染 更新 渲染、销毁等一系列过程，我们称这为Vue的生命周期。通俗的讲就是Vue实例从创建到销毁的过程就是生命周期。
每个组件或实例都会经历一个完成的生命周期，总共分为三个阶段：初始化、运行中、销毁。
实例或组件通过new Vue（）创建出来之后初始化事件和生命周期，然后就会执行beforeCreate钩子函数，此时数据还没有挂载，无法访问数据和真实的dom。
挂载数据，绑定事件等等，然后执行created函数，此时可以使用数据和修改数据，此处更改数据不会触发updated函数，一般在这里做初始化数据的获取。
接下来开始找实例或组件对应的模板，看看有没有el属性，再看看有没有模板属性，如果有模板属性就把模板属性传染出去，如果没有就把el上的东西当做模板，编译模板为虚拟dom放入到render函数中准备渲染，执行beforeMount函数，在这个函数中虚拟dom已经创建完成，马上可以渲染。
开始render,渲染出真实dom，然后执行mounted函数，此时组件已经出现在页面中，数据和真是dom都已经处理好了，事件都已经挂载好了，可以处理真实的dom了
当组件或实例的数据更改之后，会立即执行beforeUpdate,然后vue的虚拟dom机制重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比后重新渲染
更新完成后执行updated,数据已经更改完成，dom也重新render完成，可以操作更新后的dom了
当销毁时，立即执行beforeDestroy,此处一般做善后工作，例如清除计时器等
组件的数据绑定、监听 去掉后执行下dom,此时执行destroy.

8.组件之间怎么传值？
兄弟组件传值：
var EventBus = new Vue();
Object.defineProperties(Vue.prototype,{
$bus:{
get: function(){
   return  EventBus
}
}
})

9.路由跳转？
声明式路由  router-link    :to="{}"
编程式 this.$router.push
path和params不能同时使用
this.$router.replace( )
传参用query 和params


10.路由守卫？
全局前置守卫beforeEach
                    afterEach
                    beforeResolve
路由独享守卫beforeEnter
组件路由守卫 beforeRouterEnter
                    beforeRouterUpdate
                    beforeRouteLeave
导航被触发
在失活的组件里调用离开守卫
调用全局的beforeEach守卫
在重用的组件里调用beforeUpdate守卫
在路由配置中调用路由独享守卫beforeEnter
解析异步路由组件
在被激活的组件里调用beforeRouteEnter
调用全局的路由解析守卫beforeResolve守卫
导航被确认
调用全局的后置钩子afterEach
触发dom更新
用创建好的实例调用beforeRouterEnter守卫中传给next的回调函数


11.页面缓存？
keep-alive


12.为什么用vuex？
多视图依赖同一个状态，对于多层嵌套的组件非常繁琐，兄弟组件状态传递无能为力
来自不同视图的行为变更同一状态，采用父子组件直接引用或者通过事件来变更和同步状态
这些模式会导致代码无法维护，所以把共享状态抽取出来。


13.vuex包含哪些属性？
state      在计算属性中读取 return this.$store.state.count
getters    
mutations       this.$store.commit(state,{ });  同步函数
actions          this.$store.dispatch("   ",{  });  异步函数
modules


14.v-show  v-if的区别？
v-show是display:none
v-if是移除节点 添加节点
操作频繁可以用v-show

15.v-for  v-if的优先级？
v-for优先级高

16.生命周期函数可以用箭头函数嘛？
不可以，箭头函数中是没有this的


17.如何提高页面加载速度？
路由懒加载，组件懒加载
开启gzip
去掉.map文件
引用cdn
图片压缩


18.vue更新视图的方法？
深拷贝
this.$set(obj,key,value)
this.$forceUpdate();


19.jq事件监听的方法？
.bind(types, data,fn)
.live(types,data,fn)   绑定到document
.delegate('li','click',data,fn)   绑定到父元素
.on('click','li'data,fn)

jq事件委托？
将监听函数绑定在父节点上，让父辈完成事件监听，这样就把事情“委托”过去了。在父辈元素的监听函数中，可以通过event.target属性那带触发的原始元素，然后再对其进行相关处理。


jq修改样式的方法？
.css({"width":"30px"});
.style.width = "30px";
.addClass();


jq有哪些选择器？
es6中哪些用法？
let const
结构赋值
new set()
promise
async   await
Array.from() 将类对象转换为数组
Array.of(1，2，3)     将一组值转换为数组 [1,2,3];
Object.keys();
Object.assign()
函数默认值

作用域链？
作用域分为全局作用域和局部作用域；
在当前作用域中没有找到值，就会向上级作用域去查，直到查到全局作用域，这个查找过程就形成链条，叫做作用域链


prototype、__proto__与constructor？
__proto__ 和constructor属性是对象独有的。
prototype属性是函数独有的。但是js中函数也是一种对象，所以函数也拥有__proto__和constructor属性

__proto__ ：
__proto__ 的作用是当访问一个对象属性时，如果该对象内部不存在这个属性，那么就会去他的__proto__属性所指向的对象中寻找，如果父对象也不存在这个属性，就继续向上查找，直到原型链顶端null,由以上这种通过__proto__属性来链接对象直到null的一条链即为原型链。
平时调用定的字符串方法、数组方法、对象方法、函数方法都是靠__proto__继承来的。

prototype：
是函数独有的，它是从一个函数指向一个对象，它的含义是函数的原型对象，也就是这个函数所创建的实例的原型对象，由此可知f1.__proto__ == Foo.prototype,prototype属性的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都找到公用的属性和方法。任何函数在创建的时候，其实会默认同事创建该函数的prototype对象。

constructor:
也是对象才拥有，他是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数，所有的函数和对象最终都是由Function构造函数得到的，所有constructor属性的重点就是Function

总结一下：

我们需要牢记两点：①__proto__和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和constructor属性。
__proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，再往上找就相当于在null上取值，会报错。通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。
prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.__proto__ === Foo.prototype。
constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function。



less 如何定义变量？
@
用过哪些前端框架？
iview
elementUI  
antd
layui

如何判断一个变量的类型?
typeof


开发过小程序吗？




Event Loop是什么？
事件循环机制，解决javascript单线程运行时不会阻塞的一种机制，就是异步原理
是执行模型，在不同的地方有不同的实现。浏览器和Node.js基于不同的技术实现了各自的Event Loop。
node.js 是根据libuv，浏览器的eventLoop是在html5的规范中明确定义

同步、异步又分宏任务和微任务
宏任务Tasks包括：
setTimeout
setInterval
setImmediate(Node独有)
requestAnimationFrame(浏览器有)
I/O
Ul rendering (浏览器独有)

微任务Microtasks包括：
process.nextTick(Node独有)
Promise.then()
Object.observe
MutationObserve
注意：Promise构造函数中的代码是同步执行的


Tasks 宏任务队列
Microtasks 微任务队列
JS stack js调用栈
Log控制台

从事件队列取一个事件时，有微任务就把微任务执行完，然后才开始执行事件
在浏览器端所有的宏任务都在一个队列里边执行，微任务会追加到当前一轮事件循环的末尾


node.js中 process.nextTick 优先于 .then

总结：
浏览器的Event Loop和Node.js的EventLoop是不同的，实现机制也是不同的，不能混为一谈。
Node.js可以理解为有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段。
Node.js中，先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中一次取出
所有的任务放入调用栈中执行，再从微任务队列other microtask Queue中依次取出所有的任务放入调用栈中执行。
然后开始宏任务的6个阶段，每个阶段都将该宏任务队列中的所有任务都取出来执行（注意，这里和浏览器不一样，浏览器只取一个），每个宏任务执行完毕后，考试执行微任务，再开始执行下一阶段宏任务，以此构成事件循环。

Node端的EventLoop
times计时器 setTimeout  setInterval的回调
I/O
idle,prepare  node内部用
poll轮询
check检查 存放setImmediate回调
close callbacks 关闭的回调如：sockect.on("close")


浏览器渲染优化
performance 工具
浏览器1s刷新频率60Hz  75Hz
卡死 fps = 1
卡顿1<fps<60

javascript  style  layout   paint   composite
js/css   样式   布局  绘制   合成


setTimeout  和 requestAnimationFrame





1.javascript核心
对象、原型链、构造函数、执行上下文堆栈、执行上下文、变量对象、活动对象、作用域链、闭包、this
2.运行时的描述
对于每个执行上下文，都有三个重要的属性：
变量对象
作用域链
this

三种类型的代码：全局代码、函数代码和eval代码


函数提升优先于变量提升
填充VO的顺序是：函数的形参 > 函数声明 > 变量声明

如何解决跨域？
后端配置cors
proxy
jsonp


import和require的区别
遵循规范
require是AMD规范引入方式
import是es6的语法标准，如果要兼容浏览器的话必须转化成es5
调用时间
require是运行时调用，所以require的理论上可以运行在代码的任何地方
import是编译时调用，所以必须写在文件开头
本质
require 是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量
import是解构过程，目前所有引擎都没有实现import,我们在node中使用babel支持es6，也仅仅是将而是转换为es5再执行，import语法会被转成require.


vue中@/ ./  ../  ~@/的区别？
./ 表示相对路径，具体代表当前目录下的同级目录，遵从的是从后向前找文件
@/也表示相对路径，在/build/webpack.base.conf.js中@是配置的，@代表src目录，遵从从前往后找，比如@/components/login,就表示src/components/login文件
../表示父级目录
<img src="@/assets/####">   @表示src文件
background-image: url('~@/assets/image/logo.png');  ~表示根目录


Vue scoped ( >>>  ||  /deep/)
vue style设置为scoped的时候web组件不会污染其他组件，也不被其他组件污染的css规范。这样在打包的时候会生成一个独一无二的hash值，这样父组件就不会影响子组件

Vue中assets 和static的区别？
相同点：
都是存放静态资源文件的。
不同点：
assets中存放的静态资源在项目打包时，会将assets中放置的静态资源文件进行打包上传，所谓打包可以简单理解为压缩体积、代码格式化。压缩后的文件最总也会放置在static文件中跟index.html一同传至服务器。
static中放置的静态资源文件就不会走打包压缩格式化代码的流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是static中的资源文件由于没有压缩等操作，所以文件的体积相对assets中打包的文件较大点。在都武器中会占用更大的空间。建议将第三方的资源文件放到static中，因为第三方已经做过处理，不需要在处理可直接上传。


babel-ployfill 的作用
babel是转码器，可以将ES6代码转为ES5,从而可以在现有环境执行，所以我们可以用ES6编写，而不用考虑环境是否支持。babel默认只转换新的javascript句法（syntax）,而不转换API，比如iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法比如Object.assign都不会转码。
ployfill指的是“用于实现浏览器不支持原生功能的代码”，比如，现代浏览器应该支持fetch函数，对于不支持的浏览器，网页中引入对应的fetch的polyfill后，这个polyfill就给全局的window对象增加一个fetch函数，这个网页中的js 可以直接使用fetch函数了，就好像浏览器本来就支持一样。
npm install --save babel-polyfill
import 'babel-polyfill'



myMixin = { }
mixins: [myMixin] 混入
数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先；
同名钩子函数将合并为一个数组，因此都将被调用，另外，混入对象的钩子将在组件自身钩子之前调用；
指为对象的选项，如methods、components、directives将被合并为同一个对象。两个对象健名冲突时，取组件对象的健值对；

全局过滤器
Vue.filter('globalFilter', function(value){
return value+'!!!'
})

局部过滤器
filters:{
 componentFilter:function(value){
return value+'!!!'
}
}

methods中调用filters中的过滤器
局部
this.$options.filters.componentFilter('参数')
全局
Vue.filter('globalFilter')('参数')


自定义指令 v-demo
Vue.directive("demo",{
bind:function(el,binding,vnode){
只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置；
},
inserted:function(el,binding,vnode,oldVnode){
被绑定元素插入父节点时调用，仅保证父节点存在，但不一定已被插入文档中；
},
update:function(el,binding,vnode,oldVnode){
所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新
},
componentUpdated:function(el,binding,vnode,oldVnode){
指令所在组件的VNode及其子VNode全部更新后调用
},
unbind:function(el,binding,vnode,oldVnode){
只调用一次，指令与元素解绑时调用
}
})

directives:{
demo:{

}
}


点击下载文件
iframe
form
var link = document.createElement('a');
link.setAttribute('download','文件名');
link.href = 'url';
link.click();
window.location.href = 'url';
window.open('url');


什么是同源策略？
协议、IP、端口 三者都相同则为同源














